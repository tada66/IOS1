#!/bin/bash
# xhorakt00 Tadeas Horak
# 7. 3. 2024

export POSIXLY_CORRECT=yes
export LC_ALL=C

DATE_TIME_REGEX="^([0-9]{4})-([0-9]{1,2})-([0-9]{1,2}) ([0-9]{1,2}):([0-9]{1,2}):([0-9]{1,2})$"     #will check if the date and time is in the correct format (YYYY-MM-DD HH:MM:SS)

help(){
    echo "Použití: xtf [-h|--help] [FILTR] [PŘÍKAZ] UŽIVATEL LOG [LOG2 [...]

PŘÍKAZ může být jeden z:
    list – výpis záznamů pro daného uživatele.
    list-currency – výpis seřazeného seznamu vyskytujících se měn.
    status – výpis skutečného stavu účtu seskupeného a seřazeného dle jednotlivých měn.
    profit – výpis stavu účtu zákazníka se započítaným fiktivním výnosem.
FILTR může být kombinace následujících:
    -a DATETIME – after: jsou uvažovány pouze záznamy PO tomto datu a čase (bez něj). DATETIME je formátu YYYY-MM-DD HH:MM:SS.
    -b DATETIME – before: jsou uvažovány pouze záznamy PŘED tímto datem a časem (bez něj).
    -c CURRENCY – jsou uvažovány pouze záznamy odpovídající dané měně.
    -h a --help vypíšou nápovědu s krátkým popisem každého příkazu a přepínače."
    exit 0
}

loadFiles(){ #load files from arguments, 1st argument tells it where to start, 2nd is the list of files to load
    start=$1
    i=$1
    shift
    args=("$@")
    while [ -n "${args[$i]}" ] 
    do
        files[i-start]="${args[$i]}"
        i=$((i+1))
        eval evaled='$'$i
    done
    for file in "${files[@]}"
    do
        if ! fileCheck "$file" ; then
            echo "$file is invalid">&2
            exit 1
        fi
    done
}

fileCheck(){ #check if file exists and that it's layout is valid
    if [[ ! -f "$1" ]] ; then
        return 1
    fi
    fileContent=$(getContent "$1")
    readarray -t TradersArr <<<"$(echo "$fileContent" | awk -F';' '{print $1}')"
    readarray -t DateTimesArr <<<"$(echo "$fileContent" | awk -F';' '{print $2}')"
    readarray -t CurrenciesArr <<<"$(echo "$fileContent" | awk -F';' '{print $3}')" #divide the 3 columns into arrays
    readarray -t AmountsArr <<<"$(echo "$fileContent" | awk -F';' '{print $4}')"
    i=0
    for trader in "${TradersArr[@]}"
    do
        if [[ -z "$trader" ]] ; then    #check if the first collum isn't empty
            return 1
        fi
        if [[ ! "${DateTimesArr[$i]}" =~ $DATE_TIME_REGEX ]] ; then     #check if the date time collum has the correct format
            return 1
        fi
        if [[ ! "${#CurrenciesArr[$i]}" -eq 3 ]] || [[ ! "${CurrenciesArr[$i]}" =~ [A-Z]{3} ]] ; then       #Currency code must be exactly 3 Upper case letters long
            return 1
        fi
        if [[ ! "${AmountsArr[$i]}" =~ [0-9]+\.[0-9]+ ]] ; then  #check if it's a decimal number
            return 1
        fi
        i=$((i+1))
    done
    return "0"
}

getContent(){   #load the content from a file into a variable, is file is compressed it unzips it with gunzip
    if [[ "$1" == *.gz ]] ; then
        fileContent="$(gunzip -c "$1")"
    else
        fileContent="$(cat "$1")"
    fi
    echo "$fileContent"
}

combinedFiles(){    #Combines the content from multiple files into a single variable
    for file in "${files[@]}"
    do
    getContent "$file"
    done
}

filter(){
    USER=$1     #get the user from the argument passed to the function
    if [[ -z "$USER" ]] ; then
        exit 0
    fi
    AWKARG="\$1 == user"    #variable to store the eventual argument for awk
    if [[ -n $AFTER ]]; then
        AWKARG+=" && \$2 > after"
    fi
    if [[ -n $BEFORE ]]; then
        AWKARG+=" && \$2 < before"
    fi
    if [[ -n $CURRENCY ]]; then
        AWKARG+=" && \$3 == currency"
    fi
    combinedFiles | awk -v user="$USER" -v after="$AFTER" -v before="$BEFORE" -v currency="$CURRENCY" -F ';' "$AWKARG"   #according to the interwebz there's no way to return a string, much less an array, and that this is just how it's done in shell, not sure if i like this
}

getCurrency(){
    UnsortedMultiCurr=$( filter "$1" | awk -F';' '{print $3}')    #save all the currencies left after filtering
    readarray -t UnsortedMultiCurrArr <<<"$UnsortedMultiCurr"    #split results from awk by new line into elements in an array $UnsortedMultiCurrArr
    UnsortedCurrArr=() #Array without possible duplicates
    i=0
    for elementM in "${UnsortedMultiCurrArr[@]}"
    do
        found=0
        for elementS in "${UnsortedCurrArr[@]}"
        do
            if [[ "$elementM" == "$elementS" ]] ; then      #possible duplicates were removed
                found=1
            fi
        done
        if [[ "$found" == "0" ]] ; then
            UnsortedCurrArr[i]="$elementM"
            i=$((i+1))
        fi
    done
    printf "%s\n" "${UnsortedCurrArr[@]}" | sort   #results sorted by sort utility, it needs to be fed with values separated by new lines, hence the use of printf instead of echo
}

status(){
    readarray -t SortedCurrArr <<<"$(getCurrency "$1")"
    CurrNames=$(filter "$1" | awk -F';' '{print $3}')    #save all the currency names left after filtering
    readarray -t CurrNameArr <<<"$CurrNames"    #split results from awk by new line into elements in an array CurrNameArr
    CurrAmounts=$(filter "$1" | awk -F';' '{print $4}')
    readarray -t CurrAmountArr <<<"$CurrAmounts"
    j=0
    if [[ -z "${CurrNameArr[*]}" ]] || [[ -z "${SortedCurrArr[*]}" ]] ; then
        exit 0
    fi
    for CurrName in "${CurrNameArr[@]}"
    do
        i=0
        for SortedCurrName in "${SortedCurrArr[@]}"
        do
            if [[ "$SortedCurrName" == "$CurrName" ]] ; then
                SortedCurrAmountArr[i]=$(awk "BEGIN { printf \"%.4f\", ${SortedCurrAmountArr[$i]} + ${CurrAmountArr[$j]}; }")     #this would be better with bc but i dont have that in my shell
            else 
                i=$((i+1))
            fi
        done
        j=$((j+1))
    done
}

profit(){
    if [[ -z "$XTF_PROFIT" ]] ; then
        XTF_PROFIT=20           #if it hasn't been set, XTF_PROFIT defaults to 20% boost
    fi
    status "$1"
    i=0
    for SortedCurrAmount in "${SortedCurrAmountArr[@]}"
    do
        if awk -v n="$SortedCurrAmount" 'BEGIN { exit !(n > 0) }' ; then    #check if it's bigger than 0, would be nice to use -gt but it doesnt support floating-point numbers
            SortedCurrAmountArr[i]=$(awk "BEGIN { printf \"%.4f\", ${SortedCurrAmountArr[$i]} * ($XTF_PROFIT/100+1)}") #if it's bigger multiply by (100+XTF_PROFIT)%
        fi
        i=$((i+1))
    done
}

printstatus(){
    i=0
    for SortedCurrName in "${SortedCurrArr[@]}"
    do 
        echo "$SortedCurrName : ${SortedCurrAmountArr[$i]}"
        i=$((i+1))
    done
}

while getopts ":-:a:b:c:h" opt #a+arg, b+arg, c+arg, h (no arg), -+arg (used for --help)
do 
    case "$opt" in 
        h)
            help
            ;;
        -)  
            case $OPTARG in 
                help)       #only accepting --help
                    help
                    ;;
                *)
                    echo "Invalid syntax" >&2
                    exit 1
            esac
            ;;
        a)
            if [[ ! "$OPTARG" =~ $DATE_TIME_REGEX ]] ; then
                echo "Incorrect date or time format!" >&2
                exit 1
            fi
            AFTER=$OPTARG
            ;;

        b)
            if [[ ! "$OPTARG" =~ $DATE_TIME_REGEX ]] ; then
                echo "Incorrect date or time format!" >&2
                exit 1
            fi
            BEFORE=$OPTARG
            ;;

        c) CURRENCY=$OPTARG
           ;;

        *)
            echo "Invalid syntax" >&2
            exit 1
            ;;
    esac
done
if [ -n "$AFTER" ] ; then
    shift 2
fi
if [ -n "$BEFORE" ] ; then
    shift 2
fi
if [ -n "$CURRENCY" ] ;  then
    shift 2
fi

i=0
eval evaled='$'$i
while [ -n "$evaled" ] 
do
    arguments[i]="$evaled"     #loads all the entered arguments into arguments[] array
    i=$((i+1))
    eval evaled='$'$i
done

loadFiles 3 "${arguments[@]}"
case "$1" in 
    list)
        filter "$2" "${files[@]}"
        ;;
    list-currency)
        getCurrency "$2" "${files[@]}"
        ;;
    status)
        status "$2" "${files[@]}"
        printstatus
        ;;
    profit)
        profit "$2" "${files[@]}"
        printstatus
        ;;
    *)  
        loadFiles 2 "${arguments[@]}"   #if no command was entered everything is shifted by one so we need to start reading files sooner
        filter "$1"
        ;;
esac
exit 0